#!/usr/bin/env python3
#ref: https://gist.github.com/pudquick/eebc4d569100c8e3039bf3eae56bee4c
#ref: https://stackoverflow.com/questions/75163201/how-can-i-get-the-dock-badge-text-of-other-applications

from Foundation import NSBundle
from AppKit import NSNull
import objc
CoreServices = NSBundle.bundleWithIdentifier_('com.apple.CoreServices')

functions = [
    ('_LSCopyRunningApplicationArray', b'@I'),
    ('_LSCopyApplicationInformation', b'@I@@'),
]

constants = [
    ('_kLSDisplayNameKey', b'@'),
]

objc.loadBundleFunctions(CoreServices, globals(), functions)
objc.loadBundleVariables(CoreServices, globals(), constants)


kLSDefaultSessionID = 0xfffffffe # The actual value is `int -2`
badge_label_key = "StatusLabel" # TODO: Is there a `_kLS*` constant for this?

app_asns = _LSCopyRunningApplicationArray(kLSDefaultSessionID)
app_infos = [_LSCopyApplicationInformation(kLSDefaultSessionID, asn, None) for asn in app_asns]

app_badges = { app_info.get(_kLSDisplayNameKey): app_info[badge_label_key].get("label", None)
    for app_info in app_infos if badge_label_key in app_info }

whatsapp_color = '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'
# whatsapp_bw = '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'
signal_color = 'iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAALBlWElmTU0AKgAAAAgABQEaAAUAAAABAAAASgEbAAUAAAABAAAAUgExAAIAAAAYAAAAWgEyAAIAAAAUAAAAcodpAAQAAAABAAAAhgAAAAAAAACQAAAAAQAAAJAAAAABRmx5aW5nIE1lYXQgQWNvcm4gNy4zLjMAMjAyMzowNDowNSAyMjowNzo0OAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAJAAAAAAVmUSPAAAACXBIWXMAABYlAAAWJQFJUiTwAAACdGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5GbHlpbmcgTWVhdCBBY29ybiA3LjMuMzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0wNC0wNVQyMjowNzo0ODwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx0aWZmOllSZXNvbHV0aW9uPjE0NDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6Q29tcHJlc3Npb24+NTwvdGlmZjpDb21wcmVzc2lvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+MTQ0PC90aWZmOlhSZXNvbHV0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KB5SsdAAAB9ZJREFUWAnNWHuMlFcV/937Pea9LEuhS8uyy6MIQq2y1ipU+zA1CG2kVVETq7Rao/2jsa2tRtuEFPuPhNjGhPiHRIhoRJP6aMVGqkXBrkKLbd2RlgILuyxlt8tjl52dme9xr+fcrzM7w3y7iBjTQ4a5cx/n/O553XMWeIeRmAhP51e0k2oZblPammVB5gIZOtC2kCoUsCxoDQERCsnfNaSEpUH/hKD/wxBK0m8RaFtZfgh5DqrcP5yZ0pdfJ7yaY9VhHTOeXbdOy+dKY2sh5Vqt/PcCIiekTSu1W2vHVV4xA103p1UA6LAgLPcVobHF6vrbj3ftuokmx6mO84fuH26xkvZmYSVW8xYVFKGVolE94/HjFzsipQoJ6aTofgKhX3rG9cO7dm1sGqpwkpUBqUYKV262EunVoT+G0DtHYEJanhwM4w1oG38M9irDuAHZUoeGd+gV4CTTt3q23HLjjc+zCQxVAS0vfP1uy0mt9ovnCANrpU55b2+Pvlh4oaQR0DbbAjLJ6MNjnjNrfJcJiXiTDJZlualV3nXvu6eylVgAiz+dd1MtU58QltOmwxLNNILhGXJkFD2NK1okbr3WRaGs8ZnrE7jvtiQ+cZ2LlpzEW8MKKzpdnDqn6KMJsIBsZMdiiRSk5bJbTLeuumXb2Ze3BkZV2ZnJdlLlNZp8Jg4MH2XhKVfgwdUpfLzTwcAZjX/0BPj9Sx5ePRr5Zf8pZTS2igDd9dEEnt3vY9OOkjmbTsShElA+ydTqPTOzHR1Hgdci29mJWQQ1Ezkwix+nilaWLXLgBRpjBOyxnxdx+M0Qi9ttLLhCYmo2svyZUY2DJ0I8tLWA+a0WFs+2sKTdgmMLvHDANxciX64jTaajKE6GjjWbFiJAlhZNHNpales28w82EZvj4TtSeGTbGH70hxK+cHMS3/pUCjOnVl2w7tzJMwpPdXnYvLOM5YtsrP98GhueKuI3f/fQqClKU5I8RztNzMRoKNTSkef5DV+EzbRsoY2Hbk/hse1FHCeT/OwbOcyfaVyvDkTtj1YCeu/KJFYsdfBtusR6OvvompTxrxdeC5Ah89XHLvkZlMM8oisKQcDqdanoBPuMR+7xyE/H0HMyxKavZi8IphbYXDIbnzk2GBrtMi/mybwbSETGNIAIXYPu2VR8y2uvsvFXsv/jd6ZxWVM96AamMRMtWWHOdr0eGF7Mk3lPRA1AeCPnmbbLJEWTi+7eEF8kn7mQmSYSwPNzL7ew9uYE8sSLeTJvlhFHsYDKvsZHFjsYPKtwmEz1yWVu3NmLmruDeBw+qTBAPG9Y4oBlxFEU9uetJByBvW8E2H8kwJI2G63NsbjPOzX5zxlTJK6mFLD+F/QskXZYRhw1SOL3KEH+vmKpa9S64MrJIyqO6URzzIvBMG+WEff2NQIiTfKbdNPVNmZNk2jOxN9kIqGTzTMv5sm8WUZctDUAmozh/2OtARA/hBwBz/8zMInwbCHe+f4bcMyLkyvzZhlxj64BFGp+sSKSNFOmBPbsfs+o9WA/nfwfEfNiUzHvsk+AGtTxdqY29W+N0DIlrg9QQnx0TRrdfQFOUqheKnEK6T4WGp7Me6KwNxiF4qelqiQTkn/J+5iWE2ifbmH77th6/KIw8mM7t1XickohzHvysJfjJmMprNbetxT2HgqwkmqfA6SlS6EjAyG2/KlsypEdVD/1DUV1UxxPkxhN63LeKj91XP2VSDmXkotOU430nZ+M4YPvsrGPki0/H/zATkSRW3G2qiE2XjYp8NzLPn65p2z8qWb5Px4eoWfn3h+Oon2GhcepJnLp+vywxkUX1cfGZ4yGLKHI58d9yKfKcB5l1QeoXOXCyiLYu//lY9/BwFSEi+g5WXO9e8ECbSuZiQs0roU2/KoIroW4QBuXVLkb9ZRaG78wgIKwNCq5iTM1kYZPw2vm2EjSezM0ovHk0yUMkvnWUEG/6v0udrzk48s/GKXyNL6E7e4NTAn7pVsS2Ed++PDWsWoJW4Ew/k0Aqd1ShIHnDKCweKpfJ6eVqKNM8iLfIJcWmEdR8cQ9GROiG39dJNtHuWPd51IYoo7iu9upcCOHvZK6EKb+04q7bGxYm8GMKcIU+XkKdTZTY+lqjpjGUYWep0cHj/OMATSY7zo6e/n8vLRTndwgstM9vdczbc9oUeMV6iqODSp8/7fUIhFa9okPv9tGSOlpJdU3NywxbPDn7oC05+F3L3rYTaHN0cS8GkvWCAwzk04SujRywD9x6AjPVt2982v5B9LTFm4M/QIEdQLc8PHNeIND8rhzqGzmtM+JLUHCEqQRO8KDgExd5jU6x3mG08ekRKFsOVkUT7/xzRc3Lfwe760eUX17Xs0tuG1ZIje9Iwx8igRFUSHMx6KwqIDhQ5zyeY2jhbXEtTL7HccJB4BZi6zI22OINlKP76SaUB4+sadn5533j53qM9m3CqhQGPBlpmVPMte21MlMn80dJXlaDLP6Kc5XDJA/PJ6c+I8NFrXPaWoDEyid6e0aym+7u3/fljcr5xpYNDd3NM+5fdt97pQ5n6VDC+gvFZbpm+p0VDl+Md/RHxqUVwwpog6Vhnu39+x88MmR412na7k0AKosZud9bEbr3BWL3JaOWdLO5ixh2dQ0CcpfsWeoi6GlxjWeZ7tS7PrKL4x6I0ePj7z+zIHBnj8OVGS9o7//DfAIR0csEZhRAAAAAElFTkSuQmCC'
# bars = 'iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAQAAABLCVATAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAqklEQVR4nGL4z0AdSCVj4AZBqH8sMOF/ogz/Of4CRXjhIpxQEUm4CCNUlybcBITB/zhB1F9DJBEpsCYJhMhfE7AIO0LkZRjYDFQ3YvqXOBGCipR/Uckgqrlo1KBRg0YNGjVo1KBRg0aoQT8CEQL/uEAUSiNCGkQhNyL+mIJFOBAi0EYEUFABqokJJvdPCNqI4YKLsENFRBEOgepSxnQhBZBqBgEAAAD//wMA7zsOXl0uqHMAAAAASUVORK5CYII='

string = ''

for app, badge in app_badges.items():
    if app == 'WhatsApp' and badge != '':
        if badge == '!':
            string = string + 'E'
        elif int(badge) > 0:
            string = string + 'W'
        else:
            print('oopsa')
    elif app == 'Signal' and badge != '':
        if int(badge) > 0:
            string = string + 'S'
        else:
            print('oopsb')
    elif app == 'Telegram' and badge != NSNull.null():
        if int(badge) > 0:
            string = string + 'T'
        else:
            print('oopsc')
    elif badge !='' and badge != NSNull.null():
        string = string + 'O'

# the reason to do this in two stages, is only the first image printed is displayed, so this is a simple way 
# to make sure the most important notification is shown

if 'E' in string:
    print('| sfimage=exclamationmark.bubble')
if 'W' in string:
    print('| image=' + whatsapp_color)
if 'S' in string:
    print('| image=' + signal_color)
if 'T' in string:
    print('| sfimage=airplane.departure')
if 'O' in string:
    print('| sfimage=bell.badge')

if len(string) == 0:
    print(string)
